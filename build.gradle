plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id "fi.evident.beanstalk" version "0.2.22"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'fi.evident.beanstalk'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

bootJar {
    mainClassName = 'com.example.gradlebuild.GradlebuildApplication'
}

test {
    useJUnitPlatform()
}

beanstalk {
    //profile = 'my-profile' // Only required if using .aws/credentials
    s3Endpoint = ${getProjectProperty('s3Endpoint.url')}
    beanstalkEndpoint = ${getProjectProperty('beanstalkEndpoint.url')}

    deployments {
        // Example to deploy to the same env
        staging {
            file = tasks.bootJar
            application = 'my-app'
            environment = 'my-app-staging'
        }
        // Example to create a new env for each version (to use URL swapping for blue/green deployment)
        production {
            file = tasks.bootJar
            application = 'my-app'
            environment = "my-app-${project.version.replaceAll('\\.', '-')}"
            template = 'default' // Saved configuration name to use to create each env
        }
    }
}

def String getProjectProperty(String propertyName)
{
    String projectProperty = "null"
    if (hasProperty(propertyName))
    {
        projectProperty = this.properties[propertyName]
    }
    return projectProperty
}
